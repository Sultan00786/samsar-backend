generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String         @id @default(cuid())
  email            String         @unique
  name             String?
  username         String         @unique
  password         String
  profilePicture   String?
  bio              String?
  location         String?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  role             UserRole       @default(USER)
  preferences      Json?
  favorites        Favorite[]
  listings         Listing[]      @relation("UserListings")
  receivedMessages Message[]      @relation("ReceivedMessages")
  sentMessages     Message[]      @relation("SentMessages")
  notifications    Notification[]
  relatedNotifications Notification[] @relation("RelatedNotifications")
  conversations    Conversation[] @relation("UserConversations")
}

model Listing {
  id                String             @id @default(cuid())
  title             String
  description       String?
  price             Float
  category          String
  mainCategory      String
  subCategory       String
  location          String
  condition         String?
  listingAction     String?
  status            String             @default("ACTIVE")
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  userId            String
  attributes        Attribute[]
  conversations     Conversation[]     @relation("ListingConversations")
  favorites         Favorite[]
  features          Feature[]
  images            Image[]
  messages          Message[]
  notifications     Notification[]     @relation("ListingNotifications")
  user              User               @relation("UserListings", fields: [userId], references: [id])
  realEstateDetails RealEstateDetails?
  vehicleDetails    VehicleDetails?

  @@index([userId])
  @@index([mainCategory])
}

model Image {
  id        String  @id @default(cuid())
  url       String
  order     Int     @default(0)
  listingId String
  listing   Listing @relation(fields: [listingId], references: [id])

  @@index([listingId])
}

model Favorite {
  id        String   @id @default(cuid())
  userId    String
  listingId String
  createdAt DateTime @default(now())
  listing   Listing  @relation(fields: [listingId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, listingId])
  @@index([userId])
  @@index([listingId])
}

model Conversation {
  id            String    @id @default(cuid())
  listingId     String?
  lastMessage   String?
  lastMessageAt DateTime  @default(now())
  listing       Listing?  @relation("ListingConversations", fields: [listingId], references: [id])
  messages      Message[]
  participants  User[]    @relation("UserConversations")

  @@index([listingId])
}

model Message {
  id             String       @id @default(cuid())
  content        String
  senderId       String
  recipientId    String
  conversationId String
  listingId      String?
  createdAt      DateTime     @default(now())
  read           Boolean      @default(false)
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  recipient      User         @relation("ReceivedMessages", fields: [recipientId], references: [id])
  sender         User         @relation("SentMessages", fields: [senderId], references: [id])
  listing        Listing?     @relation(fields: [listingId], references: [id])

  @@index([senderId])
  @@index([recipientId])
  @@index([conversationId])
  @@index([listingId])
}

model Notification {
  id              String           @id @default(cuid())
  type            NotificationType
  content         String
  read            Boolean          @default(false)
  createdAt       DateTime         @default(now())
  userId          String
  relatedId       String?
  relatedListingId String?
  relatedUserId   String?
  user            User             @relation(fields: [userId], references: [id])
  relatedListing  Listing?        @relation("ListingNotifications", fields: [relatedListingId], references: [id])
  relatedUser     User?           @relation("RelatedNotifications", fields: [relatedUserId], references: [id])

  @@index([userId])
  @@index([relatedListingId])
  @@index([relatedUserId])
}

model Attribute {
  id        String  @id @default(cuid())
  name      String
  value     String
  listingId String
  listing   Listing @relation(fields: [listingId], references: [id])

  @@index([listingId])
}

model Feature {
  id        String  @id @default(cuid())
  name      String
  value     Boolean @default(false)
  listingId String
  listing   Listing @relation(fields: [listingId], references: [id])

  @@index([listingId])
}

model VehicleDetails {
  id                 String            @id @default(cuid())
  vehicleType        VehicleType
  make               String
  model              String
  year               Int
  mileage            Int?
  fuelType           FuelType?
  transmissionType   TransmissionType?
  color              String?
  condition          Condition?
  features           String[]          @default([])
  interiorColor      String?
  engine             String?
  warranty           Int?
  serviceHistory     String?
  previousOwners     Int?
  registrationStatus String?
  listingId          String            @unique
  brakeType          String?
  engineSize         String?
  listing            Listing           @relation(fields: [listingId], references: [id])

  @@index([listingId])
}

model RealEstateDetails {
  id               String   @id @default(cuid())
  propertyType     String
  size             String?
  yearBuilt        String?
  bedrooms         String?
  listingId        String   @unique
  bathrooms        String?
  condition        String?
  features         String[] @default([])
  constructionType String?
  parking          String?
  listing          Listing  @relation(fields: [listingId], references: [id])

  @@index([listingId])
}

enum UserRole {
  USER
  ADMIN
}

enum ListingStatus {
  DRAFT
  ACTIVE
  SOLD
  RENTED
  EXPIRED
  ARCHIVED
}

enum ListingAction {
  SELL
  RENT
}

enum NotificationType {
  NEW_MESSAGE
  LISTING_INTEREST
  PRICE_UPDATE
  LISTING_SOLD
  SYSTEM_NOTICE
  LISTING_CREATED
}

enum VehicleType {
  CAR
  TRUCK
  MOTORCYCLE
  RV
  OTHER
  VAN
  BUS
  BOAT
  CONSTRUCTION
}

enum FuelType {
  gasoline
  diesel
  electric
  hybrid
  pluginHybrid
  lpg
  cng
  other
}

enum TransmissionType {
  automatic
  manual
  semiAutomatic
  continuouslyVariable
  dualClutch
  other
}

enum Condition {
  new
  likeNew
  excellent
  good
  fair
  poor
  salvage
}
