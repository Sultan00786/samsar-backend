generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String         @id @default(cuid())
  email                String         @unique
  name                 String?
  username             String         @unique
  password             String
  profilePicture       String?
  bio                  String?
  location             String?
  dateOfBirth          String?
  street               String?
  city                 String?
  postalCode           String?
  createdAt            DateTime       @default(now())
  updatedAt            DateTime       @updatedAt
  role                 UserRole       @default(USER)
  preferences          Json?
  favorites            Favorite[]
  listings             Listing[]      @relation("UserListings")
  receivedMessages     Message[]      @relation("ReceivedMessages")
  sentMessages         Message[]      @relation("SentMessages")
  relatedNotifications Notification[] @relation("RelatedNotifications")
  notifications        Notification[]
  conversations        Conversation[] @relation("UserConversations")
}

model Listing {
  id                String             @id @default(cuid())
  title             String
  description       String?
  price             Float
  category          String
  mainCategory      String
  subCategory       String
  location          String
  condition         String?
  listingAction     String?
  status            String             @default("ACTIVE")
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  userId            String
  
  // Vehicle-specific fields
  color             String?
  interiorColor     String?
  mileage          Float?
  transmission     String?
  fuelType         String?
  engineSize       Float?
  engineNumber     String?
  vin              String?
  year             Int?
  make             String?
  model            String?
  
  // Property-specific fields
  size             Float?
  bedrooms         Int?
  bathrooms        Float?
  floors           Int?
  yearBuilt        Int?
  parkingSpaces    Int?
  furnished        Boolean?
  utilities        Boolean?
  
  // Common fields
  features         Feature[]
  images           Image[]
  attributes       Attribute[]
  conversations     Conversation[]     @relation("ListingConversations")
  favorites         Favorite[]
  user              User               @relation("UserListings", fields: [userId], references: [id])
  Message           Message[]
  notifications     Notification[]     @relation("ListingNotifications")
  realEstateDetails RealEstateDetails?

  @@index([userId])
  @@index([mainCategory])
}

model Image {
  id        String  @id @default(cuid())
  url       String
  order     Int     @default(0)
  listingId String
  listing   Listing @relation(fields: [listingId], references: [id])

  @@index([listingId])
}

model Favorite {
  id        String   @id @default(cuid())
  userId    String
  listingId String
  createdAt DateTime @default(now())
  listing   Listing  @relation(fields: [listingId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, listingId])
  @@index([userId])
  @@index([listingId])
}

model Conversation {
  id            String    @id @default(cuid())
  listingId     String?
  lastMessage   String?
  lastMessageAt DateTime  @default(now())
  listing       Listing?  @relation("ListingConversations", fields: [listingId], references: [id])
  messages      Message[]
  participants  User[]    @relation("UserConversations")

  @@index([listingId])
}

model Message {
  id             String       @id @default(cuid())
  content        String
  senderId       String
  recipientId    String
  conversationId String
  createdAt      DateTime     @default(now())
  read           Boolean      @default(false)
  listingId      String?
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  listing        Listing?     @relation(fields: [listingId], references: [id])
  recipient      User         @relation("ReceivedMessages", fields: [recipientId], references: [id])
  sender         User         @relation("SentMessages", fields: [senderId], references: [id])

  @@index([senderId])
  @@index([recipientId])
  @@index([conversationId])
  @@index([listingId])
}

model Notification {
  id               String           @id @default(cuid())
  type             NotificationType
  content          String
  read             Boolean          @default(false)
  createdAt        DateTime         @default(now())
  userId           String
  relatedId        String?
  relatedListingId String?
  relatedUserId    String?
  relatedListing   Listing?         @relation("ListingNotifications", fields: [relatedListingId], references: [id])
  relatedUser      User?            @relation("RelatedNotifications", fields: [relatedUserId], references: [id])
  user             User             @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([relatedListingId])
  @@index([relatedUserId])
}

model Attribute {
  id        String  @id @default(cuid())
  name      String
  value     String
  listingId String
  listing   Listing @relation(fields: [listingId], references: [id])

  @@index([listingId])
}

model Feature {
  id        String  @id @default(cuid())
  name      String
  value     Boolean @default(false)
  listingId String
  listing   Listing @relation(fields: [listingId], references: [id])

  @@index([listingId])
}

model VehicleDetails {
  id                 String            @id @default(cuid())
  vehicleType        VehicleType
  make               String
  model              String
  year               Int
  mileage            Int?
  fuelType           FuelType?
  transmissionType   TransmissionType?
  color              String?
  condition          Condition?
  features           String[]          @default([])
  interiorColor      String?
  engine             String?
  warranty           String?
  serviceHistory     String?
  previousOwners     Int?
  
  // Common fields
  engineType         String?
  engineSize         String?
  enginePowerOutput  String?
  driveType          String?
  bodyStyle          String?
  safetyFeatures     String[]          @default([])
  comfortFeatures    String[]          @default([])
  entertainmentSystem String[]         @default([])
  exteriorFeatures   String[]          @default([])
  performanceFeatures String[]         @default([])
  modifications      String[]          @default([])
  customFeatures     String[]          @default([])

  // Bus specific fields
  busType            String?
  seatingCapacity    Int?
  luggageSpace       Float?
  wheelchairAccessible Boolean?
  wheelchairLift     Boolean?
  accessibilityFeatures String[]       @default([])
  emergencyExits     Int?

  // Car specific fields
  trunkCapacity      Float?
  airbags            Int?
  brakeType          String?
  fuelTankCapacity   String?
  roofType           String?
  suspensionType     String?
  steeringType       String?
  parkingAssist      String[]          @default([])


  // Motorcycle specific fields
  motorcycleType     String?
  engineConfiguration String?
  ridingStyle        String?
  brakeSystem        String[]          @default([])
  frameType          String?
  wheelSize          String?
  tireType           String?
  startingSystem     String?
  instrumentCluster  String[]          @default([])
  lightingSystem     String[]          @default([])

  // Truck specific fields
  truckType          String?
  cargoFeatures      String[]          @default([])
  bodyFeatures       String[]          @default([])
  cargoCapacity      Float?
  axleConfiguration  String?
  cabType            String?
  bedLength          String?
  payload            Float?
  towingCapacity     Float?
  gvwr               Float?
  wheelbase          String?

  // Van specific fields
  vanType            String?
  passengerFeatures  String[]          @default([])
  conversionFeatures String[]          @default([])
  cargoVolume        Float?
  roofHeight         String?
  interiorHeight     String?
  interiorLength     String?

  // Relations

  registrationStatus String?
  registrationExpiry String?
  vin                String?
  engineNumber       String?
  tireCondition      String?

  // Additional car-specific fields
  warrantyPeriod      String?
  serviceHistoryDetails String?
  customsCleared      Boolean?
  communicationSystem String[]          @default([])
  maintenanceHistory  String?
  lastInspectionDate  String?
  certifications      String[]          @default([])
  luggageCompartments Int?
  luggageRacks        Boolean?

  // Tractor-specific fields
  hours              Int?
  horsepower         Int?
  driveSystem        String?
  engineSpecs        String[]          @default([])
  engineManufacturer String?
  engineModel        String?
  displacement       String?
  cylinders          String?
  torque             Int?
  emissions          String?
  hydraulicSystem    String?
  hydraulicFlow      Int?
  hydraulicOutlets   String[]          @default([])
  ptoSystem         String[]          @default([])
  ptoHorsepower     Int?
  frontAttachments   String[]          @default([])
  rearAttachments    String[]          @default([])
  threePointHitch    String?
  hitchCapacity      Int?
  cabFeatures        String[]          @default([])
  seating            String[]          @default([])
  steeringSystem     String[]          @default([])
  lighting           String[]          @default([])
  precisionFarming   String[]          @default([])
  monitor            String[]          @default([])
  electricalSystem   String?

  // Safety Features
  blindSpotMonitor      Boolean?
  laneAssist           Boolean?
  adaptiveCruiseControl Boolean?
  tractionControl      Boolean?
  abs                  Boolean?
  emergencyBrakeAssist Boolean?
  tirePressureMonitoring Boolean?
  distanceTempomat     Boolean?
  distanceWarning      Boolean?
  passengerAirbag      Boolean?
  glarelessHighBeam    Boolean?
  esp                  Boolean?
  driverAirbag         Boolean?
  highBeamAssistant    Boolean?
  speedLimitingSystem  Boolean?
  isofix               Boolean?
  fatigueWarningSystem Boolean?
  emergencyCallSystem  Boolean?
  sideAirbag           Boolean?
  trackHoldingAssistant Boolean?
  deadAngleAssistant   Boolean?
  trafficSignRecognition Boolean?
  burglarAlarmSystem   Boolean?
  immobilizer          Boolean?
  centralLocking       Boolean?

  // Camera Features
  rearCamera           Boolean?
  camera360            Boolean?
  dashCam              Boolean?
  nightVision          Boolean?
  parkingSensors       Boolean?
  parkingAid           Boolean?
  parkingAidCamera     Boolean?
  parkingAidSensorsRear Boolean?
  parkingAidSensorsFront Boolean?

  // Climate Features
  climateControl       Boolean?
  heatedSeats         Boolean?
  ventilatedSeats     Boolean?
  dualZoneClimate     Boolean?
  rearAC              Boolean?
  airQualitySensor    Boolean?
  airConditioning     Boolean?
  twoZoneClimateControl Boolean?

  // Entertainment Features
  bluetooth           Boolean?
  appleCarPlay        Boolean?
  androidAuto         Boolean?
  premiumSound        Boolean?
  wirelessCharging    Boolean?
  usbPorts            Boolean?
  cdPlayer            Boolean?
  dvdPlayer           Boolean?
  rearSeatEntertainment Boolean?
  androidCar          Boolean?
  onBoardComputer     Boolean?
  dabRadio            Boolean?
  handsFreeCalling    Boolean?
  integratedMusicStreaming Boolean?
  radio               Boolean?
  soundSystem         Boolean?
  wifiHotspot         Boolean?

  // Lighting Features
  ledHeadlights       Boolean?
  adaptiveHeadlights  Boolean?
  ambientLighting     Boolean?
  fogLights           Boolean?
  automaticHighBeams  Boolean?
  ledDaytimeRunningLights Boolean?
  daytimeRunningLights Boolean?
  headlightCleaning   Boolean?
  lightSensor         Boolean?

  // Convenience Features
  keylessEntry        Boolean?
  sunroof             Boolean?
  spareKey            Boolean?
  remoteStart         Boolean?
  powerTailgate       Boolean?
  autoDimmingMirrors  Boolean?
  rainSensingWipers   Boolean?
  mountainDrivingAssistant Boolean?
  electricalWindowLifter Boolean?
  electricalSideMirrors Boolean?
  electricSeats       Boolean?
  headUpDisplay       Boolean?
  leatherSteeringWheel Boolean?
  lumbarSupport       Boolean?
  multifunctionalSteeringWheel Boolean?
  navigationSystem    String?
  rainSensor          Boolean?
  automaticStartStop  Boolean?
  automaticDazzlingInteriorMirrors Boolean?
  switchingRockers    Boolean?
  armrest             Boolean?
  voiceControl        Boolean?
  touchscreen         Boolean?
  
  // Extras
  aluminumRims        Boolean?
  luggageCompartmentSeparation Boolean?
  summerTires         Boolean?
  powerSteering       Boolean?

  // Additional Technical Fields
  wheelType           String?
  bodyType            String?
  insuranceType       String?
  upholsteryMaterial  String?
  accidentFree        Boolean?
  importStatus        String?
  
  // Motorcycle specific fields
  startType           String?

  frontSuspension     String[]         @default([])
  rearSuspension      String[]         @default([])
  riderAids           String[]         @default([])
  electronics         String[]         @default([])
  seatHeight          Int?
  handlebarType       String?
  storageOptions      String[]         @default([])
  protectiveEquipment String[]         @default([])
  
  // Nested Safety Features for forms
  frontAirbags        Boolean?
  sideAirbags         Boolean?
  curtainAirbags      Boolean?
  kneeAirbags         Boolean?
  cruiseControl       Boolean?
  laneDepartureWarning Boolean?
  laneKeepAssist      Boolean?
  automaticEmergencyBraking Boolean?
  
  // Additional notes field
  additionalNotes     String?



}

model RealEstateDetails {
  id                   String   @id @default(cuid())
  propertyType         String
  size                 String?
  yearBuilt            String?
  bedrooms             String?
  bathrooms            String?
  condition            String?
  listingId            String   @unique
  constructionType     String?
  features             String[] @default([])
  parking              String?
  floor                Int?
  totalFloors          Int?
  elevator             Boolean?
  balcony              Boolean?
  storage              Boolean?
  heating              String?
  cooling              String?
  buildingAmenities    String[] @default([])
  energyRating         String?
  furnished            String?
  petPolicy            String?
  view                 String?
  securityFeatures     String[] @default([])
  fireSafety           String[] @default([])
  flooringType         String?
  internetIncluded     Boolean?
  windowType           String?
  accessibilityFeatures String[] @default([])
  renovationHistory    String?
  parkingType          String?
  utilities            String[] @default([])
  exposureDirection    String[] @default([])
  storageType         String[] @default([])
  listing             Listing  @relation(fields: [listingId], references: [id])

  @@index([listingId])
}

enum UserRole {
  USER
  ADMIN
}

enum ListingStatus {
  DRAFT
  ACTIVE
  SOLD
  RENTED
  EXPIRED
  ARCHIVED
}

enum ListingAction {
  SELL
  RENT
}

enum NotificationType {
  NEW_MESSAGE
  LISTING_INTEREST
  PRICE_UPDATE
  LISTING_SOLD
  SYSTEM_NOTICE
  LISTING_CREATED
}

enum VehicleType {
  CAR
  TRUCK
  MOTORCYCLE
  RV
  OTHER
  VAN
  BUS
  CONSTRUCTION
  TRACTOR
}

enum FuelType {
  gasoline
  diesel
  electric
  hybrid
  pluginHybrid
  lpg
  cng
  other
}

enum TransmissionType {
  automatic
  manual
  semiAutomatic
  continuouslyVariable
  dualClutch
  other
}

enum Condition {
  new
  likeNew
  excellent
  good
  fair
  poor
  salvage
}
