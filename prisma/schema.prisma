// This is your Prisma schema file
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// Main Models
model User {
  id             String   @id @default(cuid())
  email          String   @unique
  name           String?
  username       String   @unique
  password       String
  profilePicture String?
  bio            String?
  location       String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  role           UserRole @default(USER)
  preferences    Json?

  // Relations
  listings         Listing[]      @relation("UserListings")
  sentMessages     Message[]      @relation("SentMessages")
  receivedMessages Message[]      @relation("ReceivedMessages")
  conversations    Conversation[] @relation("UserConversations")
  notifications    Notification[]
  favorites        Favorite[]
}

enum UserRole {
  USER
  ADMIN
}

model Listing {
  id            String    @id @default(cuid())
  title         String
  description   String?
  price         Float
  category      String    // Deprecated
  mainCategory  String    // Main category (e.g. VEHICLES, REAL_ESTATE)
  subCategory   String    // Sub category (e.g. CAR, HOUSE)
  location      String
  condition     String?
  listingAction String?
  status        String    @default("ACTIVE")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  userId        String
  user          User           @relation("UserListings", fields: [userId], references: [id])
  images        Image[]
  favorites     Favorite[]
  attributes    Attribute[]
  features      Feature[]
  conversations Conversation[] @relation("ListingConversations")
  vehicleDetails VehicleDetails?
  realEstateDetails RealEstateDetails?

  @@index([userId])
  @@index([mainCategory])
}

enum ListingStatus {
  DRAFT
  ACTIVE
  SOLD
  RENTED
  EXPIRED
  ARCHIVED
}

enum ListingAction {
  SELL
  RENT
}

model Image {
  id        String  @id @default(cuid())
  url       String
  order     Int     @default(0)
  listingId String
  listing   Listing @relation(fields: [listingId], references: [id])

  @@index([listingId])
}

model Favorite {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  listingId String
  listing   Listing  @relation(fields: [listingId], references: [id])
  createdAt DateTime @default(now())

  @@unique([userId, listingId])
  @@index([userId])
  @@index([listingId])
}

// Messaging System
model Conversation {
  id            String    @id @default(cuid())
  participants  User[]    @relation("UserConversations")
  listingId     String
  listing       Listing   @relation("ListingConversations", fields: [listingId], references: [id])
  messages      Message[]
  lastMessage   String?
  lastMessageAt DateTime  @default(now())
}

model Message {
  id             String       @id @default(cuid())
  content        String
  senderId       String
  sender         User         @relation("SentMessages", fields: [senderId], references: [id])
  recipientId    String
  recipient      User         @relation("ReceivedMessages", fields: [recipientId], references: [id])
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  createdAt      DateTime     @default(now())
  read           Boolean      @default(false)

  @@index([senderId])
  @@index([recipientId])
  @@index([conversationId])
}

// Notification System
model Notification {
  id        String           @id @default(cuid())
  type      NotificationType
  content   String
  read      Boolean          @default(false)
  createdAt DateTime         @default(now())

  // Relations
  userId    String
  user      User    @relation(fields: [userId], references: [id])
  relatedId String? // Could be listingId, messageId, etc.

  @@index([userId])
}

enum NotificationType {
  NEW_MESSAGE
  LISTING_INTEREST
  PRICE_UPDATE
  LISTING_SOLD
  SYSTEM_NOTICE
}

// Flexible Attributes System
model Attribute {
  id        String  @id @default(cuid())
  name      String
  value     String
  listingId String
  listing   Listing @relation(fields: [listingId], references: [id])

  @@index([listingId])
}

model Feature {
  id        String  @id @default(cuid())
  name      String
  value     Boolean @default(false)
  listingId String
  listing   Listing @relation(fields: [listingId], references: [id])

  @@index([listingId])
}

enum VehicleType {
  CAR
  TRUCK
  MOTORCYCLE
  RV
  OTHER
}

enum FuelType {
  gasoline
  diesel
  electric
  hybrid
  pluginHybrid
  lpg
  cng
  other
}

enum TransmissionType {
  automatic
  manual
  semiAutomatic
  continuouslyVariable
  dualClutch
  other
}

enum Condition {
  new
  likeNew
  excellent
  good
  fair
  poor
  salvage
}

// Vehicle Details
model VehicleDetails {
  id              String           @id @default(cuid())
  vehicleType     VehicleType
  make            String
  model           String
  year            String
  mileage         String?
  fuelType        FuelType?
  transmissionType TransmissionType?
  color           String?
  condition       Condition?
  
  // Relation to Listing
  listingId       String   @unique
  listing         Listing  @relation(fields: [listingId], references: [id])

  @@index([listingId])
}

// Real Estate Details
model RealEstateDetails {
  id            String   @id @default(cuid())
  propertyType  String
  size          String?
  yearBuilt     String?
  bedrooms      String?
  bathrooms     String?
  condition     String?
  
  // Relation to Listing
  listingId     String   @unique
  listing       Listing  @relation(fields: [listingId], references: [id])

  @@index([listingId])
}
